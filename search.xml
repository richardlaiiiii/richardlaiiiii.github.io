<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>binary_tree&amp;sort</title>
    <url>/2022/07/23/binary-tree/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// merge sort and quick sort</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;Ofast&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fastio ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;v,<span class="type">int</span> L,<span class="type">int</span> M,<span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">left</span>(v.<span class="built_in">begin</span>()+L,v.<span class="built_in">begin</span>()+M+<span class="number">1</span>);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">right</span>(v.<span class="built_in">begin</span>()+M+<span class="number">1</span>,v.<span class="built_in">begin</span>()+R+<span class="number">1</span>);</span><br><span class="line">    left.<span class="built_in">push_back</span>(INT_MAX);</span><br><span class="line">    right.<span class="built_in">push_back</span>(INT_MAX);</span><br><span class="line">    <span class="type">int</span> index_l=<span class="number">0</span>, index_r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=L;i&lt;=R;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(left[index_l]&lt;=right[index_r]) v[i]=left[index_l++];</span><br><span class="line">        <span class="keyword">else</span> v[i]=right[index_r++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;v,<span class="type">int</span> L,<span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;R) &#123;</span><br><span class="line">        <span class="type">int</span> M=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">merge_sort</span>(v,L,M);</span><br><span class="line">        <span class="built_in">merge_sort</span>(v,M+<span class="number">1</span>,R);</span><br><span class="line">        <span class="built_in">merge</span>(v,L,M,R);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> L,<span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i=L,j=R,pivot=arr[(L+R)&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=j) &#123;</span><br><span class="line">        <span class="keyword">while</span>(arr[i]&lt;pivot) i++;</span><br><span class="line">        <span class="keyword">while</span>(arr[j]&gt;pivot) j--;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=j) <span class="built_in">swap</span>(arr[i],arr[j]),i++,j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;L) <span class="built_in">quick_sort</span>(arr,L,j);</span><br><span class="line">    <span class="keyword">if</span>(i&lt;R) <span class="built_in">quick_sort</span>(arr,i,R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fastio;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v=&#123;<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="built_in">merge_sort</span>(v,<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:v) cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以linked list實作</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;Ofast&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fastio ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    node *left=<span class="literal">nullptr</span>, *right=<span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fastio;</span><br><span class="line">    node *root=<span class="built_in">new</span>(node);</span><br><span class="line">    root-&gt;data=<span class="number">3</span>;</span><br><span class="line">    node *new_node=<span class="built_in">new</span>(node);</span><br><span class="line">    new_node-&gt;data=<span class="number">1</span>;</span><br><span class="line">    root-&gt;left=new_node;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Competitive Programing</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/07/22/hello-world/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">12</span>]=&#123;<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;.&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++) <span class="built_in">putchar</span>(a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>$$a^2+b^2&#x3D;c^2$$</p>
]]></content>
  </entry>
</search>
